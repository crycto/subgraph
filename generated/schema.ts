// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Match extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Match entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Match entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Match", id.toString(), this);
  }

  static load(id: string): Match | null {
    return store.get("Match", id) as Match | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get umpire(): Bytes {
    let value = this.get("umpire");
    return value.toBytes();
  }

  set umpire(value: Bytes) {
    this.set("umpire", Value.fromBytes(value));
  }

  get uri(): string {
    let value = this.get("uri");
    return value.toString();
  }

  set uri(value: string) {
    this.set("uri", Value.fromString(value));
  }

  get minScore(): BigInt {
    let value = this.get("minScore");
    return value.toBigInt();
  }

  set minScore(value: BigInt) {
    this.set("minScore", Value.fromBigInt(value));
  }

  get scoreMultiple(): BigInt {
    let value = this.get("scoreMultiple");
    return value.toBigInt();
  }

  set scoreMultiple(value: BigInt) {
    this.set("scoreMultiple", Value.fromBigInt(value));
  }

  get deadline(): BigInt {
    let value = this.get("deadline");
    return value.toBigInt();
  }

  set deadline(value: BigInt) {
    this.set("deadline", Value.fromBigInt(value));
  }

  get winningScore(): BigInt | null {
    let value = this.get("winningScore");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set winningScore(value: BigInt | null) {
    if (value === null) {
      this.unset("winningScore");
    } else {
      this.set("winningScore", Value.fromBigInt(value as BigInt));
    }
  }

  get bets(): Array<string> | null {
    let value = this.get("bets");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set bets(value: Array<string> | null) {
    if (value === null) {
      this.unset("bets");
    } else {
      this.set("bets", Value.fromStringArray(value as Array<string>));
    }
  }

  get positions(): Array<string> | null {
    let value = this.get("positions");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set positions(value: Array<string> | null) {
    if (value === null) {
      this.unset("positions");
    } else {
      this.set("positions", Value.fromStringArray(value as Array<string>));
    }
  }

  get totalBets(): BigInt {
    let value = this.get("totalBets");
    return value.toBigInt();
  }

  set totalBets(value: BigInt) {
    this.set("totalBets", Value.fromBigInt(value));
  }

  get totalAmount(): BigDecimal {
    let value = this.get("totalAmount");
    return value.toBigDecimal();
  }

  set totalAmount(value: BigDecimal) {
    this.set("totalAmount", Value.fromBigDecimal(value));
  }

  get rewardRate(): BigInt {
    let value = this.get("rewardRate");
    return value.toBigInt();
  }

  set rewardRate(value: BigInt) {
    this.set("rewardRate", Value.fromBigInt(value));
  }

  get rewardAmount(): BigDecimal {
    let value = this.get("rewardAmount");
    return value.toBigDecimal();
  }

  set rewardAmount(value: BigDecimal) {
    this.set("rewardAmount", Value.fromBigDecimal(value));
  }

  get treasuryAmount(): BigDecimal {
    let value = this.get("treasuryAmount");
    return value.toBigDecimal();
  }

  set treasuryAmount(value: BigDecimal) {
    this.set("treasuryAmount", Value.fromBigDecimal(value));
  }

  get stage(): string {
    let value = this.get("stage");
    return value.toString();
  }

  set stage(value: string) {
    this.set("stage", Value.fromString(value));
  }
}

export class Position extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Position entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Position entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Position", id.toString(), this);
  }

  static load(id: string): Position | null {
    return store.get("Position", id) as Position | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get match(): string {
    let value = this.get("match");
    return value.toString();
  }

  set match(value: string) {
    this.set("match", Value.fromString(value));
  }

  get score(): BigInt {
    let value = this.get("score");
    return value.toBigInt();
  }

  set score(value: BigInt) {
    this.set("score", Value.fromBigInt(value));
  }

  get bets(): BigInt {
    let value = this.get("bets");
    return value.toBigInt();
  }

  set bets(value: BigInt) {
    this.set("bets", Value.fromBigInt(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }
}

export class Bet extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Bet entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Bet entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Bet", id.toString(), this);
  }

  static load(id: string): Bet | null {
    return store.get("Bet", id) as Bet | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get match(): string {
    let value = this.get("match");
    return value.toString();
  }

  set match(value: string) {
    this.set("match", Value.fromString(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    return value.toBytes();
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get score(): BigInt {
    let value = this.get("score");
    return value.toBigInt();
  }

  set score(value: BigInt) {
    this.set("score", Value.fromBigInt(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get claimed(): boolean {
    let value = this.get("claimed");
    return value.toBoolean();
  }

  set claimed(value: boolean) {
    this.set("claimed", Value.fromBoolean(value));
  }

  get claimedAmount(): BigDecimal | null {
    let value = this.get("claimedAmount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set claimedAmount(value: BigDecimal | null) {
    if (value === null) {
      this.unset("claimedAmount");
    } else {
      this.set("claimedAmount", Value.fromBigDecimal(value as BigDecimal));
    }
  }

  get refunded(): boolean {
    let value = this.get("refunded");
    return value.toBoolean();
  }

  set refunded(value: boolean) {
    this.set("refunded", Value.fromBoolean(value));
  }

  get refundedAmount(): BigDecimal | null {
    let value = this.get("refundedAmount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set refundedAmount(value: BigDecimal | null) {
    if (value === null) {
      this.unset("refundedAmount");
    } else {
      this.set("refundedAmount", Value.fromBigDecimal(value as BigDecimal));
    }
  }
}

export class Tournament extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Tournament entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Tournament entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Tournament", id.toString(), this);
  }

  static load(id: string): Tournament | null {
    return store.get("Tournament", id) as Tournament | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get paused(): boolean {
    let value = this.get("paused");
    return value.toBoolean();
  }

  set paused(value: boolean) {
    this.set("paused", Value.fromBoolean(value));
  }

  get minBetAmount(): BigDecimal {
    let value = this.get("minBetAmount");
    return value.toBigDecimal();
  }

  set minBetAmount(value: BigDecimal) {
    this.set("minBetAmount", Value.fromBigDecimal(value));
  }

  get rewardRate(): BigInt {
    let value = this.get("rewardRate");
    return value.toBigInt();
  }

  set rewardRate(value: BigInt) {
    this.set("rewardRate", Value.fromBigInt(value));
  }

  get totalBets(): BigInt {
    let value = this.get("totalBets");
    return value.toBigInt();
  }

  set totalBets(value: BigInt) {
    this.set("totalBets", Value.fromBigInt(value));
  }

  get totalAmount(): BigDecimal {
    let value = this.get("totalAmount");
    return value.toBigDecimal();
  }

  set totalAmount(value: BigDecimal) {
    this.set("totalAmount", Value.fromBigDecimal(value));
  }

  get rewardAmount(): BigDecimal {
    let value = this.get("rewardAmount");
    return value.toBigDecimal();
  }

  set rewardAmount(value: BigDecimal) {
    this.set("rewardAmount", Value.fromBigDecimal(value));
  }

  get treasuryAmount(): BigDecimal {
    let value = this.get("treasuryAmount");
    return value.toBigDecimal();
  }

  set treasuryAmount(value: BigDecimal) {
    this.set("treasuryAmount", Value.fromBigDecimal(value));
  }

  get claimedTreasuryAmount(): BigDecimal {
    let value = this.get("claimedTreasuryAmount");
    return value.toBigDecimal();
  }

  set claimedTreasuryAmount(value: BigDecimal) {
    this.set("claimedTreasuryAmount", Value.fromBigDecimal(value));
  }
}
